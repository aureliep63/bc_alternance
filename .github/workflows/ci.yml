name: CI for Backend Service

on:
  push:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # √âtape 1 : Build de l'image Docker pour les tests
      # Cette image contiendra Maven, Java, Chrome et Chromedriver.
      - name: Build Selenium test image
        run: docker build -f Dockerfile.selenium -t my-selenium-image .

      # √âtape 2 : Lancer les tests unitaires et d‚Äôint√©gration
      # Le conteneur utilise l'image que vous avez construite et lui passe les secrets en tant que variables d'environnement.
      - name: Run unit and integration tests with Maven
        env:
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          FIREBASE_CONFIG_JSON: ${{ secrets.FIREBASE_CONFIG_JSON }}
          SPRING_MAIL_HOST: ${{ secrets.SPRING_MAIL_HOST }}
          SPRING_MAIL_PORT: ${{ secrets.SPRING_MAIL_PORT }}
          SPRING_MAIL_USERNAME: ${{ secrets.SPRING_MAIL_USERNAME }}
          SPRING_MAIL_PASSWORD: ${{ secrets.SPRING_MAIL_PASSWORD }}
        run: |
          docker run --rm \
            -v $PWD:/app \
            -w /app \
            -e JWT_SECRET_KEY="$JWT_SECRET_KEY" \
            -e FIREBASE_CONFIG_JSON="$FIREBASE_CONFIG_JSON" \
            -e SPRING_MAIL_HOST="$SPRING_MAIL_HOST" \
            -e SPRING_MAIL_PORT="$SPRING_MAIL_PORT" \
            -e SPRING_MAIL_USERNAME="$SPRING_MAIL_USERNAME" \
            -e SPRING_MAIL_PASSWORD="$SPRING_MAIL_PASSWORD" \
            my-selenium-image \
            mvn clean test

      # √âtape 3 : Lancer les tests Selenium avec le profil selenium
      # Comme pour les tests unitaires, on passe les variables d'environnement pour que l'application puisse d√©marrer.
      - name: Run Selenium tests with Maven
        env:
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          FIREBASE_CONFIG_JSON: ${{ secrets.FIREBASE_CONFIG_JSON }}
          SPRING_MAIL_HOST: ${{ secrets.SPRING_MAIL_HOST }}
          SPRING_MAIL_PORT: ${{ secrets.SPRING_MAIL_PORT }}
          SPRING_MAIL_USERNAME: ${{ secrets.SPRING_MAIL_USERNAME }}
          SPRING_MAIL_PASSWORD: ${{ secrets.SPRING_MAIL_PASSWORD }}
        run: |
          echo "üìÇ V√©rification des fichiers..."
          ls -R frontend || { echo "‚ùå Le dossier frontend n'existe pas"; exit 1; }
          test -f frontend/package.json || { echo "‚ùå package.json introuvable"; exit 1; }

          docker run --rm \
            -v $PWD:/app \
            -w /app \
            -e JWT_SECRET_KEY="$JWT_SECRET_KEY" \
            -e FIREBASE_CONFIG_JSON="$FIREBASE_CONFIG_JSON" \
            -e SPRING_MAIL_HOST="$SPRING_MAIL_HOST" \
            -e SPRING_MAIL_PORT="$SPRING_MAIL_PORT" \
            -e SPRING_MAIL_USERNAME="$SPRING_MAIL_USERNAME" \
            -e SPRING_MAIL_PASSWORD="$SPRING_MAIL_PASSWORD" \
            my-selenium-image \
            sh -c "
              echo 'üì¶ Installation du frontend...'
              npm install --prefix frontend

              echo 'üöÄ Lancement du frontend...'
              npm run start --prefix frontend &

              echo '‚è≥ Attente que le frontend r√©ponde sur le port 4200...'
              for i in {1..30}; do
                nc -z localhost 4200 && echo '‚úÖ Frontend pr√™t' && break
                echo '... en attente ...'
                sleep 1
              done

              echo 'üß™ Lancement des tests Selenium...'
              mvn verify -Pselenium
            "
      
      

      # √âtape 4 : Si tous les tests passent, build de l'image finale
      - name: Build Docker image for deployment
        run: docker build -t my-backend-image:latest .
