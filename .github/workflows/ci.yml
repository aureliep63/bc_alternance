name: CI for Backend Service

on:
  push:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

          # ÉTAPE DE DÉBOGAGE
          # Cette étape va lister les fichiers et dossiers à la racine du dépôt.
      - name: Debug - List repository files
        run: ls -la

          # Étape 1 : Construire l'image du front-end
          # Le Dockerfile est dans le dossier 'bcAngularAlternance'.
      - name: Build frontend Docker image
        run: docker build -t electricty-business-frontend:latest -f ./bcAngularAlternance/Dockerfile ./bcAngularAlternance

          # Étape 2 : Construire l'image du back-end
          # Le Dockerfile est dans le dossier 'BC_alternance'.
      - name: Build backend Docker image
        run: docker build -t electricty-business-backend:latest -f ./BC_alternance/Dockerfile ./BC_alternance

          # Étape 3 : Construire l'image des tests Selenium
          # Le Dockerfile est dans le dossier 'BC_alternance'.
      - name: Build Selenium test image
        run: docker build -f ./BC_alternance/Dockerfile.selenium -t my-selenium-image .


      # --- Lancement des services pour les tests ---

      # Étape 2 : Lancer le service back-end
      # On expose le port 8080 de l'application back-end sur le port 8080 de l'hôte
      - name: Start backend service
        run: docker run -d -p 8080:8080 --name backend-service electricty-business-backend:latest

      # Étape 3 : Lancer le service web du front-end
      # On expose le port 80 de Nginx sur le port 4200 de l'hôte
      - name: Start frontend service
        run: docker run -d -p 4200:80 --name frontend-service electricty-business-frontend:latest

      # --- Exécution des tests ---

      # Étape 4 : Lancer les tests unitaires et d’intégration du back-end
      # On peut le faire sans les services du front-end et des tests Selenium
      - name: Run unit and integration tests with Maven
        run: |
          docker run --rm \
            -v $PWD:/app \
            -w /app \
            --add-host=host.docker.internal:host-gateway \
            -e JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
            -e FIREBASE_CONFIG_JSON="${{ secrets.FIREBASE_CONFIG_JSON }}" \
            -e SPRING_MAIL_HOST="${{ secrets.SPRING_MAIL_HOST }}" \
            -e SPRING_MAIL_PORT="${{ secrets.SPRING_MAIL_PORT }}" \
            -e SPRING_MAIL_USERNAME="${{ secrets.SPRING_MAIL_USERNAME }}" \
            -e SPRING_MAIL_PASSWORD="${{ secrets.SPRING_MAIL_PASSWORD }}" \
            maven:3.9.6-eclipse-temurin-21 \
            mvn clean test

      # Étape 5 : Lancer les tests Selenium (end-to-end)
      # Les services du front-end et du back-end sont maintenant disponibles via host.docker.internal
      - name: Run Selenium tests with Maven
        run: |
          docker run --rm \
            -v $PWD:/app \
            -w /app \
            --add-host=host.docker.internal:host-gateway \
            -e JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
            -e FIREBASE_CONFIG_JSON="${{ secrets.FIREBASE_CONFIG_JSON }}" \
            -e SPRING_MAIL_HOST="${{ secrets.SPRING_MAIL_HOST }}" \
            -e SPRING_MAIL_PORT="${{ secrets.SPRING_MAIL_PORT }}" \
            -e SPRING_MAIL_USERNAME="${{ secrets.SPRING_MAIL_USERNAME }}" \
            -e SPRING_MAIL_PASSWORD="${{ secrets.SPRING_MAIL_PASSWORD }}" \
            my-selenium-image \
            mvn verify -Pselenium

      # --- Nettoyage ---

      # Étape 6 : Arrêter tous les services après les tests
      - name: Stop frontend and backend services
        if: always()
        run: |
          docker stop frontend-service
          docker stop backend-service