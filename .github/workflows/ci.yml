name: CI for Backend Service

on:
  push:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape 1 : Construire l'image Docker du front-end
      - name: Build frontend Docker image
        run: docker build -t electricty-business-frontend:latest -f C:\Users\HB\Desktop\BC\bcAngularAlternance\Dockerfile .

      # Étape 2 : Lancer le service web du front-end
      # On expose le port 80 de Nginx sur le port 4200 de l'hôte
      - name: Start frontend service
        run: docker run -d -p 4200:80 --name frontend-service electricty-business-charg-map-frontend:latest

      # Étape 3 : Lancer les tests unitaires et d’intégration
      # Le conteneur Maven utilise 'host.docker.internal' pour accéder aux services sur l'hôte
      - name: Run unit and integration tests with Maven
        run: |
          docker run --rm \
            -v $PWD:/app \
            -w /app \
            --add-host=host.docker.internal:host-gateway \
            -e JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
            -e FIREBASE_CONFIG_JSON="${{ secrets.FIREBASE_CONFIG_JSON }}" \
            -e SPRING_MAIL_HOST="${{ secrets.SPRING_MAIL_HOST }}" \
            -e SPRING_MAIL_PORT="${{ secrets.SPRING_MAIL_PORT }}" \
            -e SPRING_MAIL_USERNAME="${{ secrets.SPRING_MAIL_USERNAME }}" \
            -e SPRING_MAIL_PASSWORD="${{ secrets.SPRING_MAIL_PASSWORD }}" \
            maven:3.9.6-eclipse-temurin-21 \
            mvn clean test

      # Étape 4 : Lancer les tests Selenium
      # Les tests se connectent maintenant au serveur de front-end sur `http://host.docker.internal:4200`
      - name: Run Selenium tests with Maven
        run: |
          docker run --rm \
            -v $PWD:/app \
            -w /app \
            --add-host=host.docker.internal:host-gateway \
            -e JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
            -e FIREBASE_CONFIG_JSON="${{ secrets.FIREBASE_CONFIG_JSON }}" \
            -e SPRING_MAIL_HOST="${{ secrets.SPRING_MAIL_HOST }}" \
            -e SPRING_MAIL_PORT="${{ secrets.SPRING_MAIL_PORT }}" \
            -e SPRING_MAIL_USERNAME="${{ secrets.SPRING_MAIL_USERNAME }}" \
            -e SPRING_MAIL_PASSWORD="${{ secrets.SPRING_MAIL_PASSWORD }}" \
            my-selenium-image \
            mvn verify -Pselenium

      # Étape 5 : Arrêter le service du front-end après les tests
      - name: Stop frontend service
        if: always()
        run: docker stop frontend-service